window.SIDEBAR_ITEMS = {"constant":[["TASK_RETCODE_SYSCALL_KILL","The return code set when a task is killed via zx_task_kill()."]],"enum":[["ExceptionType","Type of exception"],["PolicyAction","The action taken when the condition happens specified by a policy."],["PolicyCondition","The condition when a policy is applied."],["SetPolicyOptions","Control the effect in the case of conflict between the existing policies and the new policies when setting new policies."],["Status","Status of a process."],["ThreadState","The thread state."],["ThreadStateKind","Possible values for “kind” in zx_thread_read_state and zx_thread_write_state."]],"fn":[["check_timer_policy","Check whether the policy is valid."]],"struct":[["BasicPolicy","The policy type."],["CurrentThread","A handle to current thread."],["ExceptionObject","The exception object received from the exception channel."],["ExceptionReport","Data reported to an exception handler for most exceptions."],["Exceptionate","Kernel-owned exception channel endpoint."],["Job","Control a group of processes"],["JobInfo","Information of a job."],["JobPolicy","Security and resource policies of a job."],["Process","Process abstraction"],["ProcessInfo","Information of a process."],["SuspendToken","Suspend the given task."],["Thread","Runnable / computation entity"],["ThreadFlag","Thread flags."],["ThreadInfo","The thread information."],["TimerSlackPolicy","Timer slack policy."]],"trait":[["IntoResult","`into_result` returns `Self` if the type parameter is already a `ZxResult`, otherwise wraps the value in an `Ok`."],["Task","Task (Thread, Process, or Job)"]],"type":[["ThreadFn","The type of a new thread function."]]};