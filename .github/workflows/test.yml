name: Test CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 22 * * *'  # every day at 22:00 UTC

env:
  qemu_version: 7.0.0

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-20
          components: rust-src, llvm-tools-preview, rustfmt, clippy

      - name: Pull prebuilt images
        run: |
          git lfs pull -I prebuilt/linux/libc-libos.so
          git lfs pull -I prebuilt/zircon/x64/bringup.zbi
          git lfs pull -I prebuilt/zircon/x64/libzircon-libos.so
          git lfs pull -I prebuilt/zircon/x64/userboot-libos.so

      - name: Prepare rootfs
        run: make rootfs

      - name: Run unit test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast
        #run: cargo test --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
      
      - name: Cache grcov
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-grcov
      
      - name: Gather coverage data
        id: coverage
        uses: actions-rs/grcov@v0.1
#      FIXME: 'error from lcovParse: Failed to parse string'
#      - name: Coveralls upload
#        uses: coverallsapp/github-action@master
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          path-to-lcov: ${{ steps.coverage.outputs.report }}

  bench-test:
    name: Bench Test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-20
          components: rust-src, llvm-tools-preview, rustfmt, clippy

      - name: Run bench test
        uses: actions-rs/cargo@v1
        with:
          command: bench

  zircon-core-test-libos:
    name: Zircon Core Test Libos
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-20
          components: rust-src, llvm-tools-preview, rustfmt, clippy          
        
      - name: Pull prebuilt images
        run: |
          git lfs pull -I prebuilt/zircon/x64/core-tests.zbi
          git lfs pull -I prebuilt/zircon/x64/libzircon-libos.so
          git lfs pull -I prebuilt/zircon/x64/userboot-libos.so

      - name: Install python dependencies
        run: ../scripts/install-deps.sh

      - name: Run fast tests
        if: github.event_name != 'schedule'
        run: cd tests && python3 zircon_core_test.py --libos --fast --no-failed

      - name: Run full tests
        if: github.event_name == 'schedule'
        run: cd tests && python3 zircon_core_test.py --libos

  linux-libc-test-libos:
    name: Linux Libc Test Libos
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-20
          components: rust-src, llvm-tools-preview, rustfmt, clippy

      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/linux/libc-libos.so

      - name: Install dependencies
        run: ../scripts/install-deps.sh musl-tools musl-dev

      - name: Prepare rootfs
        run: make libc-test

      - name: Run fast tests
        if: github.event_name != 'schedule'
        run: cd tests && python3 linux_libc_test.py --libos --fast

      - name: Run full tests
        if: github.event_name == 'schedule'
        run: cd tests && python3 linux_libc_test.py --libos

  zircon-core-test-baremetal:
    name: Zircon Core Test Baremetal
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-20
          components: rust-src, llvm-tools-preview, rustfmt, clippy

      - name: Pull prebuilt images
        run: |
          git lfs pull -I prebuilt/zircon/x64/core-tests.zbi
          git lfs pull -I prebuilt/zircon/x64/libzircon.so
          git lfs pull -I prebuilt/zircon/x64/userboot.so

      - name: Install dependencies
        run: ../scripts/install-python-deps.sh ninja-build

      - name: Cache QEMU
        id: cache-qemu
        uses: actions/cache@v3
        with:
          path: qemu-${{ env.qemu_version }}
          key: qemu-${{ env.qemu_version }}-x86_64-riscv64

      - name: Install QEMU
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: ../scripts/install-qemu.sh ${{ env.qemu_version }} ${{ matrix.arch }}

      - name: Run fast tests
        if: github.event_name != 'schedule'
        run: cd tests && python3 zircon_core_test.py --fast

      - name: Run full tests
        if: github.event_name == 'schedule'
        run: cd tests && python3 zircon_core_test.py

  linux-libc-test-baremetal:
    name: Linux Libc Test Baremetal
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, riscv64]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-20
          components: rust-src, llvm-tools-preview, rustfmt, clippy

      - if: matrix.arch == 'riscv64'
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-binutils
          version: latest

      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/linux/libc-libos.so

      - name: Install dependencies
        run: ../scripts/install-deps.sh musl-tools musl-dev ninja-build

      - name: Cache QEMU
        id: cache-qemu
        uses: actions/cache@v3
        with:
          path: qemu-${{ env.qemu_version }}
          key: qemu-${{ env.qemu_version }}-x86_64-riscv64

      - name: Install QEMU
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: ../scripts/install-qemu.sh ${{ env.qemu_version }} ${{ matrix.arch }}

      - name: Prepare rootfs
        run: make libc-test ARCH=${{ matrix.arch }} && make image ARCH=${{ matrix.arch }}

      - name: Run fast tests
        if: github.event_name != 'schedule'
        run: cd tests && python3 linux_libc_test.py --arch ${{ matrix.arch }} --fast

      - name: Run full tests
        if: github.event_name == 'schedule'
        run: cd tests && python3 linux_libc_test.py --arch ${{ matrix.arch }}

  linux-other-test-baremetal:
    name: Linux Other Test Baremetal
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, riscv64]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-20
          components: rust-src, llvm-tools-preview, rustfmt, clippy

      - if: matrix.arch == 'riscv64'
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-binutils
          version: latest

      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/linux/libc-libos.so

      - name: Install dependencies
        run: ../scripts/install-deps.sh musl-tools musl-dev ninja-build

      - name: Cache QEMU
        id: cache-qemu
        uses: actions/cache@v3
        with:
          path: qemu-${{ env.qemu_version }}
          key: qemu-${{ env.qemu_version }}-x86_64-riscv64

      - name: Install QEMU
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: ../scripts/install-qemu.sh ${{ env.qemu_version }} ${{ matrix.arch }}         

      - name: Prepare rootfs
        run: make other-test ARCH=${{ matrix.arch }} && make image ARCH=${{ matrix.arch }}

      - name: Run fast tests
        if: github.event_name != 'schedule'
        run: cd tests && python3 linux_other_test.py --arch ${{ matrix.arch }} --fast

      - name: Run full tests
        if: github.event_name == 'schedule'
        run: cd tests && python3 linux_other_test.py --arch ${{ matrix.arch }}
