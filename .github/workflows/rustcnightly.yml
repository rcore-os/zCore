name: rustcnightly CI

on: 
  push:
  pull_request:
  schedule:
    - cron: '40 3 * * *'  # every day at 3:40

jobs:
  check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - run: echo "nightly" >rust-toolchain
      - name: Check code format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Clippy x86_64
        run: arch=x86_64 cargo clippy
      - name: Clippy riscv64
        run: arch=riscv64 cargo clippy
#        uses: actions-rs/cargo@v1
#        with:
#          command: clippy
#x86_64
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rust-src
      - run: echo "nightly" >rust-toolchain
      - run: echo "nightly" >./rboot/rust-toolchain
      - name: Build
        run: arch=x86_64 cargo build
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
      - name: Build zCore
        run: |
          cd zCore
          make build arch=x86_64 
      # FIX LATER
      # - name: Build zCore with hypervisor
      #   run: |
      #     cd zCore
      #     make build hypervisor=1

  build-aarch64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          target: aarch64-unknown-linux-gnu
      - run: echo "nightly" >rust-toolchain
      - uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: -p zircon-loader --target aarch64-unknown-linux-gnu

  build-user:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/zircon/x64/libc.so,prebuilt/zircon/x64/libfdio.so,prebuilt/zircon/x64/libunwind.so,prebuilt/zircon/x64/libzircon.so,prebuilt/zircon/x64/Scrt1.o
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: x86_64-fuchsia
      - run: echo "nightly" >rust-toolchain
      - name: Build Zircon user programs
        run: |
          cd zircon-user
          make build mode=release

  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/linux/libc-libos.so
      - name: Prepare rootfs
        run: make rootfs
      - run: echo "nightly" >rust-toolchain
      - name: Test
        run: arch=x86_64 cargo test --all-features --no-fail-fast --workspace --exclude zircon-loader
#        uses: actions-rs/cargo@v1
#        with:
#          command: test
#          args: --all-features --no-fail-fast --workspace --exclude zircon-loader
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
      - name: Cache grcov
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-grcov
      - name: Gather coverage data
        id: coverage
        uses: actions-rs/grcov@v0.1
#      FIXME: 'error from lcovParse: Failed to parse string'
#      - name: Coveralls upload
#        uses: coverallsapp/github-action@master
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          path-to-lcov: ${{ steps.coverage.outputs.report }}

  bench:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Run benchmarks
        run: arch=x86_64 cargo bench
#        uses: actions-rs/cargo@v1
#        with:
#          command: bench

  core-test-libos:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/zircon/x64/core-tests.zbi,prebuilt/zircon/x64/libzircon.so,prebuilt/zircon/x64/userboot.so
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rust-src
      - name: Install QEMU
        run: |
          sudo apt update
          sudo apt install qemu-system-x86
      - run: echo "nightly" >rust-toolchain
      - run: echo "nightly" >./rboot/rust-toolchain      
      - name: Build zCore
        run: |
          cd zCore
          make build mode=release
          cd ..
      - name: Run core-tests
        run: |
          cd scripts
          pip3 install pexpect
          python3 unix-core-tests.py

  libc-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/linux/libc-libos.so
      - name: Install musl toolchain
        run: sudo apt-get install musl-tools musl-dev -y
      - name: Prepare rootfs and libc-test
        run: make rootfs && make libc-test
      - run: echo "nightly" >rust-toolchain
      - name: Build
        run: arch=x86_64 cargo build --release -p linux-loader
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --release -p linux-loader
      - name: Run libc-tests
        run: |
          cd scripts
          python3 libc-tests.py
          cat linux/test-result.txt

  doc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: echo "nightly" >rust-toolchain
      - name: Build docs
        run: arch=x86_64 cargo doc --no-deps --all-features
#        uses: actions-rs/cargo@v1
#        with:
#          command: doc
#          args: --no-deps --all-features
#      - name: Deploy to Github Pages
#        if: ${{ github.ref == 'refs/heads/master' }}
#        uses: JamesIves/github-pages-deploy-action@releases/v3
#        with:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          BRANCH: gh-pages
#          FOLDER: target/doc


  baremetal-libc-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rust-src
      - run: echo "nightly" >rust-toolchain
      - run: echo "nightly" >./rboot/rust-toolchain
      - name: Pull prebuilt images
        run: git lfs pull -I prebuilt/linux/libc-libos.so
      - name: Install musl toolchain qemu-system-x86
        run: sudo apt-get install musl-tools musl-dev qemu-system-x86 -y
      - name: Prepare rootfs and libc-test
        run: make baremetal-test-img
      - name: Build  kernel
        run: cd zCore && make build mode=release linux=1 arch=x86_64
      - name: create qemu disk
        run: cd zCore && make baremetal-qemu-disk mode=release linux=1 arch=x86_64
      - name: Run baremetal-libc-test
        run: |
          cd scripts
          python3 ./baremetal-libc-test.py
  baremetal-rv64-oscomp-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rust-src
      - run: echo "nightly" >rust-toolchain
      - run: echo "nightly" >./rboot/rust-toolchain
      - name: Install cargo tools and qemu-system-riscv64
        run: |
          sudo apt install qemu-utils
          cargo install cargo-binutils
          rustup component add llvm-tools-preview
          wget https://github.com/rcore-os/qemu-prebuilt/releases/download/5.2.0-riscv64/qemu-system-riscv64.tar.xz > /dev/null
          tar xJf qemu-system-riscv64.tar.xz && sudo cp qemu-system-riscv64 /usr/local/bin
          wget https://github.com/rcore-os/qemu-prebuilt/releases/download/qemu-share/qemu-share.tar.xz > /dev/null
          tar xJf qemu-share.tar.xz && sudo cp -r qemu /usr/local/share/
      - name: Prepare rootfs and oscomp
        run: make riscv-image
      - name: Run baremetal-libc-test
        run: |
          cd scripts
          python3 baremetal-test-riscv64.py
